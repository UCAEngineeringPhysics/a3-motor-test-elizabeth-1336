"""
Ramp up motors' speed forward in 4 seconds. 
Slow down motors' speed forward in 4 seconds. 
Ramp up motors' speed backward in 4 seconds. 
Slow down motors' speed backward in 4 seconds. 
Stop motors.
"""
from machine import Pin, PWM
import time
from time import sleep, ticks_ms


# Motor 1 Config
INA_LEFT = Pin(7, Pin.OUT)
INB_LEFT = Pin(8, Pin.OUT)
INA_LEFT.off()
INB_LEFT.off()
PWM_LEFT = PWM(Pin(6))
PWM_LEFT.freq(1000)

# Motor 2 Config
INA_RIGHT = Pin(20, Pin.OUT)
INB_RIGHT = Pin(19, Pin.OUT)
INA_RIGHT.off()
INB_RIGHT.off()
PWM_RIGHT = PWM(Pin(21))
PWM_RIGHT.freq(1000)


#Motor 1
INB_LEFT.on() #forward
#Motor 2
INB_RIGHT.on() #forward



#The following code was generated by Chat GPT
#from prompt "How to get following code to sget
#wheels to speed up and slow down in four seconds:"
#-----------------------------------------------
# Constants
MAX_DUTY_CYCLE = 65025
RAMP_TIME = 4000  # 4 seconds
NUM_STEPS = 100  # Number of steps for ramping

start_time_1 = time.time()  # Record the start time for ramp up forward
# Ramp up forward
for step in range(NUM_STEPS + 1):
    time_on_1 = time.time() - start_time_1
    duty_cycle = int((step / NUM_STEPS) * MAX_DUTY_CYCLE)
    PWM_LEFT.duty_u16(duty_cycle)
    PWM_RIGHT.duty_u16(duty_cycle)
    sleep(RAMP_TIME / NUM_STEPS / 1000)  # Convert to seconds
print ("Ramp up forward time in seconds: ")
print (time_on_1)


# Ramp down forward
start_time_2 = time.time()  # Record the start time for ramp down forward

for step in range(NUM_STEPS + 1):
    time_on_2 = time.time() - start_time_2
    duty_cycle = int((1 - (step / NUM_STEPS)) * MAX_DUTY_CYCLE)
    PWM_LEFT.duty_u16(duty_cycle)
    PWM_RIGHT.duty_u16(duty_cycle)
    sleep(RAMP_TIME / NUM_STEPS / 1000)  # Convert to seconds
print("Ramp down forward time in seconds:")
print (time_on_2)

#-----------------------------------------------------
#Begin backwards motion

#Motor 1
INB_LEFT.off()
INA_LEFT.on() 

#Motor 2
INB_RIGHT.off()
INA_RIGHT.on() 

start_time_3 = time.time()  # Record the start time for ramp up backward

# Ramp up backward
for step in range(NUM_STEPS + 1):
    time_on_3 = time.time() - start_time_3
    duty_cycle = int((step / NUM_STEPS) * MAX_DUTY_CYCLE)
    PWM_LEFT.duty_u16(duty_cycle)
    PWM_RIGHT.duty_u16(duty_cycle)
    sleep(RAMP_TIME / NUM_STEPS / 1000)  # Convert to seconds
print ("Ramp up backward time in seconds:")
print (time_on_3)

start_time_4 = time.time()  # Record the start time for ramp down backward

# Ramp down backward
for step in range(NUM_STEPS + 1):
    time_on_4 = time.time() - start_time_4
    duty_cycle = int((1 - (step / NUM_STEPS)) * MAX_DUTY_CYCLE)
    PWM_LEFT.duty_u16(duty_cycle)
    PWM_RIGHT.duty_u16(duty_cycle)
    sleep(RAMP_TIME / NUM_STEPS / 1000)  # Convert to seconds
print ("Ramp down backward time in seconds:")
print (time_on_4)

sleep(4)


#stop motor 1
PWM_LEFT.duty_u16(0)
INA_LEFT.off()
INB_LEFT.off()

#stop motor 2
PWM_RIGHT.duty_u16(0)
INA_RIGHT.off()
INB_RIGHT.off()     
    
